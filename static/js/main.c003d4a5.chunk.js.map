{"version":3,"sources":["components/Container/ContainerStyles.js","components/Container/Container.js","styles/tokens.js","components/ContactList/ContactItem/ContactItemStyles.js","styles/ButtonBasicStyles.js","components/Button.js","components/ContactList/ContactItem/ContactItem.js","styles/ListStyles.js","components/ContactList/ContactListStyles.js","components/ContactList/ContactList.js","components/InputPhone.js","components/ContactEditor/ContactEditorStyles.js","components/ContactEditor/ContactEditor.js","components/Filter.js","components/Stats.js","App.js","index.js"],"names":["ContainerStyled","styled","div","Container","children","tokens","indigo","indigoAccent","green","black","white","Item","li","Text","p","ButtonBasic","button","Button","ContactItem","name","number","id","onDeleteContact","type","onClick","ListStyled","ul","List","ContactList","contacts","map","InputPhone","submitted","onChange","useState","value","setValue","useEffect","defaultCountry","international","withCountryCallingCode","phoneValue","style","marginBottom","Editor","form","Input","input","EditorButton","ContactEditor","onSubmit","setName","setNumber","setSubmitted","e","preventDefault","isValidPhoneNumber","setTimeout","alert","target","placeholder","minLength","required","Filter","marginLeft","Stats","totalContacts","visibleContacts","App","initialContacts","setContacts","filter","setFilter","savedContacts","localStorage","getItem","JSON","parse","setItem","stringify","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","totalContactCount","length","visibleContactCount","shortid","generate","duplicated","repeatedContact","repeatedNumber","duplicate","isDuplicated","prevContacts","currentTarget","contactId","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c003d4a5.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ContainerStyled = styled.div`\n  max-width: 1440px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n\nexport default ContainerStyled;\n","import PropTypes from 'prop-types';\nimport ContainerStyled from './ContainerStyles';\n\nconst Container = ({ children }) => (\n  <ContainerStyled>{children}</ContainerStyled>\n);\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\nexport default Container;\n","const tokens = {\n  indigo: '#a8c3e6',\n  indigoAccent: '#669fe8',\n  green: '#4caf50',\n  black: '#2a2a2a',\n  white: '#fff',\n};\n\nexport default tokens;\n","import styled from 'styled-components';\nimport tokens from '../../../styles/tokens';\n\nconst Item = styled.li`\n  position: relative;\n  display: flex;\n  align-items: center;\n  padding: 20px;\n  border: 1px solid ${tokens.black};\n  border-radius: 4px;\n`;\n\nconst Text = styled.p`\n  margin-right: 12px;\n`;\n\nexport { Item, Text };\n","import styled from 'styled-components';\n\nconst ButtonBasic = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n`;\n\nexport default ButtonBasic;\n","import styled from 'styled-components';\nimport ButtonBasic from '../styles/ButtonBasicStyles';\nimport tokens from '../styles/tokens';\n\nconst Button = styled(ButtonBasic)`\n  margin-left: auto;\n  border-radius: 4px;\n  padding: 12px 24px;\n  background-color: ${tokens.indigo};\n  color: ${tokens.white};\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    background-color: ${tokens.indigoAccent};\n  }\n\n  &:active {\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport { Item, Text } from './ContactItemStyles';\nimport Button from '../../Button';\n\nconst ContactItem = ({ name, number, id = '', onDeleteContact }) => (\n  <Item>\n    <Text>{name}: </Text>\n    <Text>{number}</Text>\n    <Button type=\"button\" onClick={() => onDeleteContact(id)}>\n      Удалить\n    </Button>\n  </Item>\n);\nContactItem.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\nexport default ContactItem;\n","import styled from 'styled-components';\n\nconst ListStyled = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n`;\n\nexport default ListStyled;\n","import styled from 'styled-components';\nimport ListStyled from '../../styles/ListStyles';\n\nconst List = styled(ListStyled)`\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n  grid-gap: 24px;\n`;\n\nexport default List;\n","import PropTypes from 'prop-types';\nimport ContactItem from './ContactItem/ContactItem';\nimport List from './ContactListStyles';\n\nconst ContactList = ({ contacts = [], onDeleteContact }) => (\n  <List>\n    {contacts.map(({ id, name, number }) => {\n      return (\n        <ContactItem\n          key={id}\n          name={name}\n          number={number}\n          onDeleteContact={onDeleteContact}\n          id={id}\n        />\n      );\n    })}\n  </List>\n);\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array,\n};\nexport default ContactList;\n","import { useState, useEffect } from 'react';\nimport 'react-phone-number-input/style.css';\nimport PhoneInput from 'react-phone-number-input';\nimport PropTypes from 'prop-types';\n\nfunction InputPhone({ submitted, onChange }) {\n  const [value, setValue] = useState('');\n\n  useEffect(() => {\n    if (submitted) {\n      setValue('');\n    }\n  }, [submitted]);\n\n  return (\n    <PhoneInput\n      defaultCountry=\"UA\"\n      international={true}\n      withCountryCallingCode={true}\n      value={value}\n      onChange={(phoneValue) => {\n        onChange(phoneValue);\n        setValue(phoneValue);\n      }}\n      style={{ marginBottom: '10px' }}\n    />\n  );\n}\nInputPhone.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  submitted: PropTypes.bool.isRequired,\n};\nexport default InputPhone;\n","import styled from 'styled-components';\nimport tokens from '../../styles/tokens';\nimport Button from '../Button';\n\nconst LH = '16px';\n\nconst Editor = styled.form`\n  width: 600px;\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n  border: 1px solid ${tokens.black};\n  border-radius: 4px;\n  margin-bottom: 20px;\n`;\n\nconst Input = styled.input`\n  padding: 12px 16px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font: inherit;\n  line-height: ${LH};\n  letter-spacing: 0.01em;\n  margin-bottom: 12px;\n`;\n\nconst EditorButton = styled(Button)`\n  width: 100%;\n`;\n\nexport { Editor, EditorButton, Input };\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\nimport InputPhone from '../InputPhone';\nimport { Editor, EditorButton, Input } from './ContactEditorStyles';\n\nconst ContactEditor = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    return setName(value);\n  };\n\n  const handleChangePhone = (value) => setNumber(value);\n\n  const resetSubmitted = () => {\n    setTimeout(() => setSubmitted(false), 1000);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!isValidPhoneNumber(number)) {\n      alert(`${number} is not valid phone number`);\n      return;\n    }\n    onSubmit(name, number);\n    setName('');\n    setNumber('');\n    setSubmitted(true);\n    resetSubmitted();\n  };\n\n  return (\n    <Editor onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        value={name}\n        onChange={handleChange}\n        placeholder={'Имя контакта'}\n        name=\"name\"\n        minLength=\"2\"\n        required\n      />\n      <InputPhone submitted={submitted} onChange={handleChangePhone} />\n      <EditorButton type=\"submit\">Сохранить</EditorButton>\n    </Editor>\n  );\n};\n\nContactEditor.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default ContactEditor;\n","import PropTypes from 'prop-types';\n\nconst Filter = ({ value = '', onChange }) => (\n  <label>\n    Фильтр по имени:\n    <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n      style={{ marginLeft: '1em', marginBottom: '1em' }}\n    />\n  </label>\n);\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import PropTypes from 'prop-types';\n\nconst Stats = ({ totalContacts = 0, visibleContacts = 0 }) => (\n  <div>\n    <p>Всего контактов: {totalContacts}</p>\n    <p>Показано контактов: {visibleContacts}</p>\n  </div>\n);\nStats.propTypes = {\n  totalContacts: PropTypes.number,\n  visibleContacts: PropTypes.number,\n};\nexport default Stats;\n","import { useEffect, useState } from 'react';\nimport shortid from 'shortid';\nimport Container from './components/Container/Container';\nimport ContactList from './components/ContactList/ContactList';\nimport ContactEditor from './components/ContactEditor/ContactEditor';\nimport Filter from './components/Filter';\nimport initialContacts from './contacts.json';\nimport Stats from './components/Stats';\n\nconst App = () => {\n  const [contacts, setContacts] = useState(initialContacts);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const savedContacts = localStorage.getItem('contacts');\n    savedContacts && setContacts(JSON.parse(savedContacts));\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const isDuplicated = (name, number) => {\n    const repeatedContact = contacts.filter((contact) => contact.name === name);\n    const repeatedNumber = contacts.filter(\n      (contact) => contact.number === number\n    );\n    let duplicate = null;\n    if (repeatedContact.length > 0) {\n      duplicate = 'name';\n      return duplicate;\n    }\n    if (repeatedNumber.length > 0) {\n      duplicate = 'number';\n      return duplicate;\n    }\n    return duplicate;\n  };\n\n  const addContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    const duplicated = isDuplicated(name, number);\n    if (duplicated === 'name') {\n      alert(`${name} уже есть в списке контактов`);\n      return;\n    }\n    if (duplicated === 'number') {\n      alert(`Номер ${number} уже сохранен в телефонной книге`);\n      return;\n    }\n    setContacts((prevContacts) => [contact, ...prevContacts]);\n  };\n\n  const deleteContact = (contactId) =>\n    setContacts((prevState) =>\n      prevState.filter((contact) => contact.id !== contactId)\n    );\n\n  const changeFilter = (e) => setFilter(e.currentTarget.value);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const visibleContacts = getVisibleContacts();\n  const totalContactCount = contacts.length;\n  const visibleContactCount = visibleContacts.length;\n  return (\n    <Container>\n      <h1>Телефонная книга</h1>\n      <Stats\n        totalContacts={totalContactCount}\n        visibleContacts={visibleContactCount}\n      />\n      <ContactEditor onSubmit={addContact} />\n      {visibleContactCount > 0 && (\n        <Filter value={filter} onChange={changeFilter} />\n      )}\n      <ContactList contacts={visibleContacts} onDeleteContact={deleteContact} />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}