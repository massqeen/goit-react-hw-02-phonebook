{"version":3,"sources":["redux/phonebook/phonebookActionTypes.js","redux/phonebook/phonebookReducer.js","redux/store.js","redux/phonebook/phonebookActions.js","redux/phonebook/phonebookSelectors.js","components/Container/ContainerStyles.js","components/Container/Container.js","styles/tokens.js","components/ContactList/ContactItem/ContactItemStyles.js","styles/ButtonBasicStyles.js","components/Button.js","components/ContactList/ContactItem/ContactItem.js","styles/ListStyles.js","components/ContactList/ContactListStyles.js","components/ContactList/ContactList.js","components/InputPhone.js","components/ContactEditor/ContactEditorStyles.js","components/ContactEditor/ContactEditor.js","components/Filter.js","components/Stats.js","App.js","index.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","CHANGE_FILTER","initialState","contacts","filter","showError","phonebookReducer","state","type","payload","id","contact","name","number","rootReducer","combineReducers","phonebook","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getContacts","getStateContacts","getStateFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","ContainerStyled","styled","div","Container","children","tokens","indigo","indigoAccent","green","black","white","Item","li","Text","p","ButtonBasic","button","Button","ContactItem","dispatch","useDispatch","onClick","deleteContact","ListStyled","ul","List","ContactList","visibleContacts","useSelector","map","InputPhone","submitted","onChange","useState","value","setValue","useEffect","defaultCountry","international","withCountryCallingCode","phoneValue","style","marginBottom","Editor","form","Input","input","EditorButton","notify","warnText","toast","warning","position","autoClose","ContactEditor","setName","setNumber","setSubmitted","addVerifiedContact","duplicated","repeatedContact","find","repeatedNumber","duplicate","isDuplicated","nanoid","addContact","onSubmit","e","preventDefault","isValidPhoneNumber","setTimeout","target","placeholder","minLength","required","Filter","changeFilter","currentTarget","marginLeft","Stats","length","App","localStorage","getItem","contactsFromLocal","JSON","parse","initialContacts","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.647d8f95.chunk.js","sourcesContent":["export const GET_CONTACTS = 'GET_CONTACTS';\nexport const ADD_CONTACT = 'ADD_CONTACT';\nexport const DELETE_CONTACT = 'DELETE_CONTACT';\nexport const CHANGE_FILTER = 'CHANGE_FILTER';\n","import {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  CHANGE_FILTER,\n  GET_CONTACTS,\n} from './phonebookActionTypes';\n\nconst initialState = {\n  contacts: [],\n  filter: '',\n  showError: false,\n};\n\nconst phonebookReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: [...state.contacts, ...payload.contacts],\n      };\n\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [\n          ...state.contacts,\n          {\n            id: payload.contact.id,\n            name: payload.contact.name,\n            number: payload.contact.number,\n          },\n        ],\n      };\n\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter((contact) => contact.id !== payload.id),\n      };\n\n    case CHANGE_FILTER:\n      return {\n        ...state,\n        filter: payload.filter,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default phonebookReducer;\n","import { createStore } from 'redux';\nimport { combineReducers } from 'redux';\nimport phonebookReducer from './phonebook/phonebookReducer';\n\nconst rootReducer = combineReducers({\n  phonebook: phonebookReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import { nanoid } from 'nanoid';\n\nimport {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  CHANGE_FILTER,\n} from './phonebookActionTypes';\n\nexport const getContacts = (contacts) => {\n  return {\n    type: GET_CONTACTS,\n    payload: {\n      contacts,\n    },\n  };\n};\n\nexport const addContact = (name, number) => {\n  return {\n    type: ADD_CONTACT,\n    payload: {\n      contact: { id: nanoid(10), name, number },\n    },\n  };\n};\n\nexport const deleteContact = (id) => {\n  return {\n    type: DELETE_CONTACT,\n    payload: {\n      id,\n    },\n  };\n};\n\nexport const changeFilter = (value) => {\n  return {\n    type: CHANGE_FILTER,\n    payload: {\n      value,\n    },\n  };\n};\n","export const getStateContacts = (state) => state.phonebook.contacts;\nexport const getStateFilter = (state) => state.phonebook.filter;\n\nexport const getVisibleContacts = (state) => {\n  const contacts = getStateContacts(state);\n  const contactFilter = getStateFilter(state);\n  const normalizedFilter = contactFilter.toLowerCase();\n\n  return contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import styled from 'styled-components';\r\n\r\nconst ContainerStyled = styled.div`\r\n  max-width: 1440px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-left: 15px;\r\n  padding-right: 15px;\r\n`;\r\n\r\nexport default ContainerStyled;\r\n","import PropTypes from 'prop-types';\r\nimport ContainerStyled from './ContainerStyles';\r\n\r\nconst Container = ({ children }) => (\r\n  <ContainerStyled>{children}</ContainerStyled>\r\n);\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Container;\r\n","const tokens = {\r\n  indigo: '#a8c3e6',\r\n  indigoAccent: '#669fe8',\r\n  green: '#4caf50',\r\n  black: '#2a2a2a',\r\n  white: '#fff',\r\n};\r\n\r\nexport default tokens;\r\n","import styled from 'styled-components';\r\nimport tokens from '../../../styles/tokens';\r\n\r\nconst Item = styled.li`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border: 1px solid ${tokens.black};\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst Text = styled.p`\r\n  margin-right: 12px;\r\n`;\r\n\r\nexport { Item, Text };\r\n","import styled from 'styled-components';\r\n\r\nconst ButtonBasic = styled.button`\r\n  border: none;\r\n  font: inherit;\r\n  cursor: pointer;\r\n  outline: none;\r\n  margin: 0;\r\n`;\r\n\r\nexport default ButtonBasic;\r\n","import styled from 'styled-components';\nimport ButtonBasic from 'styles/ButtonBasicStyles';\nimport tokens from 'styles/tokens';\n\nconst Button = styled(ButtonBasic)`\n  margin-left: auto;\n  border-radius: 4px;\n  padding: 12px 24px;\n  background-color: ${tokens.indigo};\n  color: ${tokens.white};\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    background-color: ${tokens.indigoAccent};\n  }\n\n  &:active {\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport { Item, Text } from './ContactItemStyles';\nimport Button from 'components/Button';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../../redux/phonebook/phonebookActions';\n\nconst ContactItem = ({ name, number, id = '' }) => {\n  const dispatch = useDispatch();\n  return (\n    <Item>\n      <Text>{name}: </Text>\n      <Text>{number}</Text>\n      <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Удалить\n      </Button>\n    </Item>\n  );\n};\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\nexport default ContactItem;\n","import styled from 'styled-components';\r\n\r\nconst ListStyled = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style: none;\r\n`;\r\n\r\nexport default ListStyled;\r\n","import styled from 'styled-components';\r\nimport ListStyled from '../../styles/ListStyles';\r\n\r\nconst List = styled(ListStyled)`\r\n  display: grid;\r\n  justify-content: center;\r\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n  grid-gap: 24px;\r\n`;\r\n\r\nexport default List;\r\n","import ContactItem from './ContactItem/ContactItem';\nimport List from './ContactListStyles';\nimport { useSelector } from 'react-redux';\nimport { getVisibleContacts } from 'redux/phonebook/phonebookSelectors';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} name={name} number={number} id={id} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import { useState, useEffect } from 'react';\r\nimport 'react-phone-number-input/style.css';\r\nimport PhoneInput from 'react-phone-number-input';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction InputPhone({ submitted, onChange }) {\r\n  const [value, setValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (submitted) {\r\n      setValue('');\r\n    }\r\n  }, [submitted]);\r\n\r\n  return (\r\n    <PhoneInput\r\n      defaultCountry=\"UA\"\r\n      international={true}\r\n      withCountryCallingCode={true}\r\n      value={value}\r\n      onChange={(phoneValue) => {\r\n        onChange(phoneValue);\r\n        setValue(phoneValue);\r\n      }}\r\n      style={{ marginBottom: '10px' }}\r\n    />\r\n  );\r\n}\r\nInputPhone.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  submitted: PropTypes.bool.isRequired,\r\n};\r\nexport default InputPhone;\r\n","import styled from 'styled-components';\r\nimport tokens from '../../styles/tokens';\r\nimport Button from '../Button';\r\n\r\nconst LH = '16px';\r\n\r\nconst Editor = styled.form`\r\n  width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  border: 1px solid ${tokens.black};\r\n  border-radius: 4px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px 16px;\r\n  border: 1px solid rgba(33, 33, 33, 0.2);\r\n  border-radius: 4px;\r\n  font: inherit;\r\n  line-height: ${LH};\r\n  letter-spacing: 0.01em;\r\n  margin-bottom: 12px;\r\n`;\r\n\r\nconst EditorButton = styled(Button)`\r\n  width: 100%;\r\n`;\r\n\r\nexport { Editor, EditorButton, Input };\r\n","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport InputPhone from 'components/InputPhone';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Editor, EditorButton, Input } from './ContactEditorStyles';\nimport { addContact } from '../../redux/phonebook/phonebookActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getStateContacts } from '../../redux/phonebook/phonebookSelectors';\n\nconst notify = (warnText) =>\n  toast.warning(warnText, {\n    position: 'top-center',\n    autoClose: 3000,\n  });\n\nconst ContactEditor = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getStateContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n\n  const isDuplicated = () => {\n    const repeatedContact = contacts.find((contact) => contact.name === name);\n    const repeatedNumber = contacts.find(\n      (contact) => contact.number === number\n    );\n    let duplicate = null;\n    if (repeatedContact) {\n      duplicate = 'name';\n      return duplicate;\n    }\n    if (repeatedNumber) {\n      duplicate = 'number';\n      return duplicate;\n    }\n    return duplicate;\n  };\n\n  const addVerifiedContact = () => {\n    const duplicated = isDuplicated(name, number);\n    if (duplicated === 'name') {\n      notify(`${name} уже есть в списке контактов`);\n      return;\n    }\n    if (duplicated === 'number') {\n      notify(`Номер ${number} уже сохранен в телефонной книге`);\n      return;\n    }\n    dispatch(addContact(name, number));\n  };\n\n  const handleChangeName = (e) => {\n    const { value } = e.target;\n    return setName(value);\n  };\n\n  const handleChangePhone = (value) => setNumber(value);\n\n  const resetSubmitted = () => {\n    setTimeout(() => setSubmitted(false), 1000);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!isValidPhoneNumber(number)) {\n      notify(`${number} is not valid phone number`);\n      return;\n    }\n    addVerifiedContact(name, number);\n    setName('');\n    setNumber('');\n    setSubmitted(true);\n    resetSubmitted();\n  };\n\n  return (\n    <Editor onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        value={name}\n        onChange={handleChangeName}\n        placeholder={'Имя контакта'}\n        name=\"name\"\n        minLength=\"2\"\n        required\n      />\n      <InputPhone submitted={submitted} onChange={handleChangePhone} />\n      <EditorButton type=\"submit\">Сохранить</EditorButton>\n    </Editor>\n  );\n};\n\nexport default ContactEditor;\n","import { useSelector } from 'react-redux';\nimport { getStateFilter } from 'redux/phonebook/phonebookSelectors';\nimport { changeFilter } from 'redux/phonebook/phonebookActions';\n\nconst Filter = () => {\n  const value = useSelector(getStateFilter);\n  const changeValue = (e) => changeFilter(e.currentTarget.value);\n  return (\n    <label>\n      Фильтр по имени:\n      <input\n        type=\"text\"\n        value={value}\n        onChange={changeValue}\n        style={{ marginLeft: '1em', marginBottom: '1em' }}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useSelector } from 'react-redux';\nimport {\n  getStateContacts,\n  getVisibleContacts,\n} from 'redux/phonebook/phonebookSelectors';\n\nconst Stats = () => {\n  const contacts = useSelector(getStateContacts);\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  return (\n    <div>\n      <p>Всего контактов: {contacts.length}</p>\n      <p>Показано контактов: {visibleContacts.length}</p>\n    </div>\n  );\n};\n\nexport default Stats;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/phonebook/phonebookActions';\nimport {\n  getStateContacts,\n  getVisibleContacts,\n} from 'redux/phonebook/phonebookSelectors';\nimport { ToastContainer } from 'react-toastify';\nimport Container from 'components/Container';\nimport ContactList from 'components/ContactList';\nimport ContactEditor from 'components/ContactEditor';\nimport Filter from 'components/Filter';\nimport initialContacts from 'contacts.json';\nimport Stats from 'components/Stats';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getStateContacts);\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  useEffect(() => {\n    if (localStorage.getItem('contacts') !== null) {\n      const contactsFromLocal = JSON.parse(localStorage.getItem('contacts'));\n      dispatch(getContacts(contactsFromLocal));\n    } else {\n      dispatch(getContacts(initialContacts));\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <Container>\n      <h1>Телефонная книга</h1>\n      <Stats />\n      <ContactEditor />\n      {visibleContacts.length > 0 && <Filter />}\n      <ContactList />\n      <ToastContainer />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'redux/store';\nimport App from 'App';\nimport 'styles/index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}