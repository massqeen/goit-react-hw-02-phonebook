{"version":3,"sources":["components/ContactEditor/ContactEditor.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","components/Container/Container.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/InputPhone.js","components/ContactEditor/ContactEditor.js","components/Filter.js","components/Stats.js","App.js","serviceWorker.js","index.js","components/ContactItem/ContactItem.module.css"],"names":["module","exports","Container","children","className","styles","ContactItem","name","number","id","onDeleteContact","item","text","type","btn","onClick","ContactList","contacts","list","map","key","InputPhone","submitted","onChange","useState","value","setValue","useEffect","placeholder","country","style","marginBottom","ContactEditor","state","handleChange","e","target","setState","handleChangePhone","handleSubmit","preventDefault","props","onSubmit","resetSubmitted","setTimeout","this","editor","input","minLength","required","button","Component","Filter","marginLeft","Stats","totalContacts","visibleContacts","App","initialContacts","filter","addContact","contact","shortid","generate","isContact","alert","deleteContact","contactId","prevState","changeFilter","currentTarget","getVisibleContacts","normalizedFilter","toLowerCase","includes","savedContacts","localStorage","getItem","JSON","parse","length","prevProps","snapshot","setItem","stringify","totalContactCount","visibleContactCount","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac231a01.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#a8c3e6\",\"indigo-accent\":\"#669fe8\",\"red\":\"#f44336\",\"red-accent\":\"#d32f2f\",\"green\":\"#4caf50\",\"black\":\"#2a2a2a\",\"white\":\"#fff\",\"LH\":\"16px\",\"editor\":\"ContactEditor_editor__3C2Pj\",\"input\":\"ContactEditor_input__2cglR\",\"button\":\"ContactEditor_button__nUcJ0 _extensions_buttons__36DHQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1Og4m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3Um4W _extensions_lists__Mp17V\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={styles.Container}>{children}</div>\n);\nContainer.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n};\nexport default Container;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({ name, number, id = '', onDeleteContact }) => (\r\n  <li className={styles.item}>\r\n    <p className={styles.text}>{name}: </p>\r\n    <p className={styles.text}>{number}</p>\r\n    <button\r\n      type=\"button\"\r\n      className={styles.btn}\r\n      onClick={() => onDeleteContact(id)}\r\n    >\r\n      Удалить\r\n    </button>\r\n  </li>\r\n);\r\nContactItem.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\nexport default ContactItem;\r\n","import React from 'react';\r\nimport styles from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport ContactItem from '../ContactItem/ContactItem';\r\n\r\nconst ContactList = ({ contacts = [], onDeleteContact }) => (\r\n  <ul className={styles.list}>\r\n    {contacts.map(({ id, name, number }) => {\r\n      return (\r\n        <ContactItem\r\n          key={id}\r\n          name={name}\r\n          number={number}\r\n          onDeleteContact={onDeleteContact}\r\n          id={id}\r\n        />\r\n      );\r\n    })}\r\n  </ul>\r\n);\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.array,\r\n};\r\nexport default ContactList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport 'react-phone-number-input/style.css';\r\nimport PhoneInput from 'react-phone-number-input';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction InputPhone({ submitted, onChange }) {\r\n  const [value, setValue] = useState('+380');\r\n\r\n  useEffect(() => {\r\n    if (submitted) {\r\n      setValue('+380');\r\n    }\r\n  });\r\n\r\n  return (\r\n    <PhoneInput\r\n      placeholder=\"Enter phone number\"\r\n      country=\"UA\"\r\n      value={value}\r\n      onChange={(value) => {\r\n        onChange(value);\r\n        setValue(value);\r\n      }}\r\n      style={{ marginBottom: '10px' }}\r\n    />\r\n  );\r\n}\r\nInputPhone.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  submitted: PropTypes.bool.isRequired,\r\n};\r\nexport default InputPhone;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactEditor.module.css';\r\nimport InputPhone from '../InputPhone';\r\n\r\nclass ContactEditor extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    submitted: false,\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    return this.setState({ [name]: value });\r\n  };\r\n\r\n  handleChangePhone = (value) => this.setState({ number: value });\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    this.props.onSubmit(name, number);\r\n    this.setState({ name: '', number: '', submitted: true });\r\n    this.resetSubmitted();\r\n  };\r\n\r\n  resetSubmitted() {\r\n    setTimeout(() => this.setState({ submitted: false }), 1000);\r\n  }\r\n\r\n  render() {\r\n    const { submitted } = this.state;\r\n    return (\r\n      <form className={styles.editor} onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className={styles.input}\r\n          value={this.state.name}\r\n          onChange={this.handleChange}\r\n          placeholder={'Имя контакта'}\r\n          name=\"name\"\r\n          minLength=\"2\"\r\n          required\r\n        />\r\n        {/* <input\r\n          type=\"tel\"\r\n          pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{2}-[0-9]{2}\"\r\n          className={styles.input}\r\n          value={this.state.number}\r\n          onChange={this.handleChange}\r\n          placeholder={'Телефон в формате 111-111-11-11'}\r\n          name=\"number\"\r\n        /> */}\r\n        <InputPhone submitted={submitted} onChange={this.handleChangePhone} />\r\n        <button type=\"submit\" className={styles.button}>\r\n          Сохранить\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nContactEditor.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\nexport default ContactEditor;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value = '', onChange }) => (\r\n  <label>\r\n    Фильтр по имени:\r\n    <input type=\"text\" value={value} onChange={onChange} style={{ marginLeft: '1em', marginBottom: '1em' }}/>\r\n  </label>\r\n);\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\nexport default Filter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Stats = ({ totalContacts = 0, visibleContacts = 0 }) => (\r\n  <div>\r\n    <p>Всего контактов: {totalContacts}</p>\r\n    <p>Показано контактов: {visibleContacts}</p>\r\n  </div>\r\n);\r\nStats.propTypes = {\r\n  totalContacts: PropTypes.number,\r\n  visibleContacts: PropTypes.number,\r\n};\r\nexport default Stats;\r\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport Container from './components/Container/Container';\nimport ContactList from './components/ContactList/ContactList';\nimport ContactEditor from './components/ContactEditor/ContactEditor';\nimport Filter from './components/Filter';\nimport initialContacts from './contacts.json';\nimport Stats from './components/Stats';\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: '',\n  };\n\n  componentDidMount() {\n    const savedContacts = localStorage.getItem('contacts');\n    // eslint-disable-next-line react/no-did-mount-set-state\n    savedContacts && this.setState({ contacts: JSON.parse(savedContacts) });\n  }\n\n  isContact(name) {\n    const { contacts } = this.state;\n    const repeatedContact = contacts.filter((contact) => contact.name === name);\n    return repeatedContact.length > 0;\n  }\n\n  addContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name: name,\n      number: number,\n    };\n\n    if (this.isContact(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  deleteContact = (contactId) =>\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n\n  changeFilter = (e) => this.setState({ filter: e.currentTarget.value });\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    const totalContactCount = contacts.length;\n    const visibleContactCount = visibleContacts.length;\n\n    return (\n      <Container>\n        <h1>Телефонная книга</h1>\n        <Stats\n          totalContacts={totalContactCount}\n          visibleContacts={visibleContactCount}\n        />\n        <ContactEditor onSubmit={this.addContact} />\n        {visibleContactCount > 0 && (\n          <Filter value={filter} onChange={this.changeFilter} />\n        )}\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indigo\":\"#a8c3e6\",\"indigo-accent\":\"#669fe8\",\"red\":\"#f44336\",\"red-accent\":\"#d32f2f\",\"green\":\"#4caf50\",\"black\":\"#2a2a2a\",\"white\":\"#fff\",\"item\":\"ContactItem_item__1wF2P\",\"text\":\"ContactItem_text__3EbOA\",\"btn\":\"ContactItem_btn__1xweq _extensions_buttons__36DHQ\"};"],"sourceRoot":""}